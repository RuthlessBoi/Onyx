namespace Onyx.Syntax
{
    public enum SyntaxType
    {
        BadToken,

        // Trivia
        SkippedTextTrivia,
        LineBreakTrivia,
        WhitespaceTrivia,
        SingleLineCommentTrivia,
        MultiLineCommentTrivia,

        // Tokens
        EoFToken,

        NumberToken,
        StringToken,
        CharToken,
        IdentifierToken,

        PlusToken,
        PlusEqualsToken,
        MinusToken,
        MinusEqualsToken,
        StarToken,
        StarEqualsToken,
        SlashToken,
        SlashEqualsToken,
        BangToken,
        EqualsToken,
        EqualsEqualsToken,
        TildeToken,
        HatToken,
        HatEqualsToken,
        AmpersandToken,
        AmpersandAmpersandToken,
        AmpersandEqualsToken,
        PipeToken,
        PipePipeToken,
        PipeEqualsToken,
        BangEqualsToken,
        LessToken,
        LessOrEqualsToken,
        GreaterToken,
        GreaterOrEqualsToken,
        SemiColonToken,
        EqualsGreaterToken,
        DotToken,
        DotDotToken,
        QuestionMarkToken,
        QuestionMarkQuestionMarkToken,
        QuestionMarkDotToken,
        AtToken,

        LeftParenthesisToken,
        RightParenthesisToken,
        LeftBraceToken,
        RightBraceToken,
        LeftBracketToken,
        RightBracketToken,
        ColonToken,
        CommaToken,

        // Keywords
        NamespaceKeyword,
        AbstractKeyword,
        ClassKeyword,
        ConstructorKeyword,
        TemplateKeyword,
        FunctionKeyword,
        ImportKeyword,
        ReturnKeyword,
        TrueKeyword,
        FalseKeyword,
        IfKeyword,
        ElseKeyword,
        ForKeyword,
        WhileKeyword,
        DoKeyword,
        BreakKeyword,
        ContinueKeyword,
        VarKeyword,
        LetKeyword,
        ToKeyword,
        IsKeyword,
        TypeofKeyword,
        NewKeyword,
        ReadOnlyKeyword,

        // Nodes
        CompilationNode,
        NamespaceDeclarationNode,
        ClassDeclarationNode,
        FunctionDeclarationNode,
        AbstractFunctionDeclarationNode,
        ConstructorDeclarationNode,
        PropertyDeclarationNode,
        AbstractPropertyDeclarationNode,
        ModelDeclarationNode,
        ImportDeclarationNode,
        AnnotationDeclarationNode,
        GlobalStatementDelcarationNode,
        ParameterDelcarationNode,
        ModelParameterDeclarationNode,
        ModelInitializerDeclarationNode,
        ArrayInitializerDeclarationNode,
        ModelParameterInitializerDeclarationNode,
        TypeDelcarationNode,
        TypeNode,
        GenericsNode,
        NamespaceNode,
        ElseDelcarationNode,

        // Statements
        BlockStatement,
        NamespaceBlockStatement,
        VariableDeclarationStatement,
        IfStatement,
        WhileStatement,
        DoWhileStatement,
        ForStatement,
        BreakStatement,
        ContinueStatement,
        ReturnStatement,
        ExpressionStatement,

        // Expressions
        LiteralExpression,
        NameExpression,
        IndexerModifierExpression,
        DotExpression,
        TypeofExpression,
        TypeExpression,
        NewExpression,
        UnaryExpression,
        BinaryExpression,
        CompoundAssignmentExpression,
        ParenthesizedExpression,
        AssignmentExpression,
        CallExpression,
    }
}
